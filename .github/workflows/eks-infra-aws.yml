# Workfloww de autentica√ß√£o na infraestrutura da AWS e cria√ß√£o da infraestrutura do EKS (Cluster Kubernetes)

name: EKS Infra

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGION_DEFAULT: us-east-1
  EKS_CLUSTER_NAME: MechTechApi

permissions:
  issues: write
  pull-requests: write

jobs:

  tf-deploy:
    name: Terraform Analyze
    runs-on: ubuntu-latest
    env:
      BUCKET_EXISTS: false
      PLAN_OUTPUT: ""

    steps:
      - name: Checkout
        uses: actions/checkout@v4
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION_DEFAULT }}

      - name: Check if S3 bucket exists
        id: check_bucket
        run: |
          BUCKET_NAME="fiap-backend-tf"
          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "Bucket exists."
            echo "BUCKET_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Bucket does not exist."
            echo "BUCKET_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Create S3 bucket if it does not exist
        if: env.BUCKET_EXISTS == 'false'
        run: |
          aws s3api create-bucket --bucket fiap-backend-tf
          echo "Bucket created."

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request' 
        run: |
          terraform plan -no-color -input=false -var "project_name=${{ env.EKS_CLUSTER_NAME }}" -var "aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" | tee plan_output.txt
          echo "PLAN_OUTPUT<<EOF" >> $GITHUB_ENV
          cat plan_output.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ env.PLAN_OUTPUT }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: apply
        run: |
          terraform apply -auto-approve -input=false -var "project_name=${{ env.EKS_CLUSTER_NAME }}" -var "aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}"

  k8s-deploy:
    name: Deploying McTech Api
    runs-on: ubuntu-latest
    needs: tf-deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:

      - name: Checkout McTech Api Repository
        uses: actions/checkout@v4
        with:
          repository: Grupo-68-FIAP/Fiap.McTech
          path: mctech-api-rep
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION_DEFAULT }}

      - name: Update Kube Config
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.REGION_DEFAULT }}

      - name: Deploy McTech API EKS
        run: |
          kubectl apply -f mctech-api-rep/k8s/deployment-mctech-api.yml
          kubectl apply -f mctech-api-rep/k8s/secret-mctech-api.yml
          kubectl apply -f mctech-api-rep/k8s/service-mctech-api.yml
