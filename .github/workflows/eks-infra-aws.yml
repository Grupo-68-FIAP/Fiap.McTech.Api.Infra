# Workfloww de autentica√ß√£o na infraestrutura da AWS e cria√ß√£o da infraestrutura do EKS (Cluster Kubernetes)

name: EKS Infra

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGION_DEFAULT: us-east-1

permissions:
  issues: write
  pull-requests: write

jobs:
  deploy:
    name: Deploying using AWS
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout
        uses: actions/checkout@v2
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION_DEFAULT }}

      - name: Check if S3 bucket exists
        id: check_bucket
        run: |
          BUCKET_NAME="fiap-backend-tf"
          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "Bucket exists."
            echo "::set-output name=exists::true"
          else
            echo "Bucket does not exist."
            echo "::set-output name=exists::false"
          fi

      - name: Create S3 bucket if it does not exist
        if: steps.check_bucket.outputs.exists == 'false'
        run: |
          aws s3api create-bucket --bucket fiap-backend-tf
          echo "Bucket created." 

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false -var "accountIdVoclabs=$env:AWS_ACCOUNT_ID" 
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            $env:PLAN
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: terraform apply -auto-approve -input=false -var "accountIdVoclabs=$env:AWS_ACCOUNT_ID"
